import{u as a,a as p}from"./useMutation-Chvc8RUs.js";import{s as P}from"./index-FKmzij_1.js";const g=[{id:"regular",name:"Regular",pointThreshold:0,benefits:"Standard access to events, Regular pricing, Basic rewards"},{id:"gold",name:"Gold",pointThreshold:1e3,benefits:"Priority access to tickets, 10% discount on drinks, Free coat check"},{id:"platinum",name:"Platinum",pointThreshold:3e3,benefits:"VIP entrance, 15% discount on all purchases, Dedicated host, Artist meet & greets"}],h=[{id:"standard",name:"Standard Purchases",multiplier:1,description:"Standard ticket and merchandise purchases"},{id:"premium",name:"Premium Events",multiplier:2,description:"Special events and premium shows"},{id:"weekday",name:"Weekday Events",multiplier:1.5,description:"Events held Monday through Thursday"},{id:"referral",name:"Friend Referral",multiplier:3,description:"Points for bringing new customers"}],n=[{id:"cl1",customerId:"1",points:1250,tierId:"gold",lastUpdated:new Date().toISOString(),lastPointsAdded:250,lastPointsReason:"Event Attendance"},{id:"cl2",customerId:"2",points:450,tierId:"regular",lastUpdated:new Date(Date.now()-864e5).toISOString(),lastPointsAdded:150,lastPointsReason:"Bar Purchase"},{id:"cl3",customerId:"3",points:3200,tierId:"platinum",lastUpdated:new Date(Date.now()-1728e5).toISOString(),lastPointsAdded:500,lastPointsReason:"Special Promotion"}];function f(){const o=P(),d=a({queryKey:["loyalty_tiers"],queryFn:async()=>g}),u=a({queryKey:["point_multipliers"],queryFn:async()=>h}),l=a({queryKey:["customer_loyalty"],queryFn:async()=>n}),c=p({mutationFn:async({customerId:i,points:t,reason:s})=>{const r=n.findIndex(e=>e.customerId===i);if(r===-1){const e={id:`cl${n.length+1}`,customerId:i,points:t,tierId:"regular",lastUpdated:new Date().toISOString(),lastPointsAdded:t,lastPointsReason:s};return n.push(e),e}else{const e={...n[r]};e.points+=t;for(const m of g)e.points>=m.pointThreshold&&(e.tierId=m.id);return e.lastUpdated=new Date().toISOString(),e.lastPointsAdded=t,e.lastPointsReason=s,n[r]=e,e}},onSuccess:()=>{o.invalidateQueries({queryKey:["customer_loyalty"]})}}),y=p({mutationFn:async({customerId:i,tierId:t})=>{const s=n.findIndex(e=>e.customerId===i);if(s===-1)throw new Error("Customer loyalty record not found");const r={...n[s],tierId:t,lastUpdated:new Date().toISOString()};return n[s]=r,r},onSuccess:()=>{o.invalidateQueries({queryKey:["customer_loyalty"]})}});return{loyaltyTiers:d.data||[],isLoadingTiers:d.isLoading,pointsMultipliers:u.data||[],isLoadingMultipliers:u.isLoading,customerLoyalty:l.data||[],isLoadingLoyalty:l.isLoading,updateCustomerPoints:(i,t,s)=>c.mutateAsync({customerId:i,points:t,reason:s}),updateCustomerTier:(i,t)=>y.mutateAsync({customerId:i,tierId:t}),isUpdatingPoints:c.isPending,isUpdatingTier:y.isPending}}export{f as u};
