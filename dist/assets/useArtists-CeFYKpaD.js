var $=Object.defineProperty;var B=(e,a,t)=>a in e?$(e,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[a]=t;var O=(e,a,t)=>B(e,typeof a!="symbol"?a+"":a,t);import{u as N,a as L}from"./useMutation-Chvc8RUs.js";import{P as b,s as Q,r as C,h as E}from"./index-FKmzij_1.js";import{o as A,s,b as K,e as M,n as S,a as R,l as y}from"./types-D9u2zvev.js";const P=A({name:s().min(1,"Artist name is required").max(100,"Artist name must not exceed 100 characters").trim(),genre:s().max(50,"Genre must not exceed 50 characters").optional(),location:s().max(100,"Location must not exceed 100 characters").optional(),email:s().email("Invalid email format").optional().or(y("")),phone:s().regex(/^[+]?[1-9][\d]{0,15}$/,"Invalid phone number format").optional().or(y("")),bio:s().max(2e3,"Bio must not exceed 2000 characters").optional(),image:s().url("Image must be a valid URL").optional().or(y("")),status:M(["Confirmed","Pending","Inquiry","Cancelled"]).optional().default("Inquiry"),lastPerformance:s().optional(),nextPerformance:s().optional()});P.refine(e=>e.email||e.phone,{message:"Artist must have at least one contact method (email or phone)",path:["email"]});const k=A({website:s().url("Invalid website URL").optional().or(y("")),facebook:s().url("Invalid Facebook URL").optional().or(y("")),instagram:s().url("Invalid Instagram URL").optional().or(y("")),twitter:s().url("Invalid Twitter URL").optional().or(y("")),youtube:s().url("Invalid YouTube URL").optional().or(y("")),spotify:s().url("Invalid Spotify URL").optional().or(y(""))}).optional(),I=A({id:s().uuid("Invalid manager ID format"),title:s().min(1,"Manager title is required").max(100,"Title must be less than 100 characters"),name:s().min(1,"Manager name is required").max(100,"Name must be less than 100 characters"),email:s().email("Invalid email format"),phone:s().regex(/^[+]?[1-9][\d]{0,15}$/,"Invalid phone number format")}),F=A({date:s().refine(e=>!isNaN(Date.parse(e)),"Invalid performance date"),venueId:s().uuid("Invalid venue ID format"),revenue:S().min(0,"Revenue cannot be negative"),attendance:S().int("Attendance must be a whole number").min(0,"Attendance cannot be negative"),notes:s().max(500,"Performance notes must not exceed 500 characters").optional()}),H=P.extend({socialMedia:k,managers:R(I).max(5,"Maximum 5 managers allowed").optional().default([]),performanceHistory:R(F).optional().default([])}).refine(e=>e.email||e.phone,{message:"Artist must have at least one contact method (email or phone)",path:["email"]}).refine(e=>e.managers&&e.managers.length>0,{message:"Artist must have at least one manager",path:["managers"]}),V=P.partial().extend({id:s().uuid("Invalid artist ID format"),socialMedia:k,managers:R(I).max(5,"Maximum 5 managers allowed").optional(),performanceHistory:R(F).optional()}).refine(e=>!(e.email===""&&e.phone===""),{message:"Artist must have at least one contact method (email or phone)",path:["email"]}).refine(e=>!(e.status==="Confirmed"&&e.managers&&e.managers.length===0),{message:"Confirmed artists must have at least one manager",path:["managers"]}),G=A({limit:S().int("Limit must be a whole number").min(1,"Limit must be at least 1").max(100,"Limit cannot exceed 100").optional().default(20),offset:S().int("Offset must be a whole number").min(0,"Offset cannot be negative").optional().default(0),status:M(["Confirmed","Pending","Inquiry","Cancelled"]).optional(),genre:s().max(50,"Genre filter must not exceed 50 characters").optional(),location:s().max(100,"Location filter must not exceed 100 characters").optional(),hasUpcomingPerformances:K().optional(),search:s().max(100,"Search term must not exceed 100 characters").optional()}),Z=A({id:s().uuid("Invalid artist ID format")});A({artistId:s().uuid("Invalid artist ID format"),manager:I.omit({id:!0})});A({artistId:s().uuid("Invalid artist ID format"),venueId:s().uuid("Invalid venue ID format"),eventId:s().uuid("Invalid event ID format"),performanceDate:s().refine(e=>{const a=new Date(e),t=new Date;return t.setHours(0,0,0,0),a>=t},"Performance date must be today or in the future"),fee:S().min(0,"Performance fee cannot be negative").max(1e6,"Performance fee cannot exceed $1,000,000")});const z={canBook:()=>({valid:!0}),canEdit:e=>(e.status==="Confirmed"&&e.nextPerformance&&new Date(e.nextPerformance),{valid:!0}),canDelete:e=>e.metrics&&e.metrics.totalPerformances>0?{valid:!1,reason:"Cannot delete artist with performance history"}:{valid:!0},canChangeStatus:(e,a)=>a==="Confirmed"&&(!e.managers||e.managers.length===0)?{valid:!1,reason:"Artist must have at least one manager to be confirmed"}:a==="Cancelled"&&e.nextPerformance&&new Date(e.nextPerformance)>new Date?{valid:!1,reason:"Cannot cancel artist with upcoming performances"}:{valid:!0},hasCompleteProfile:e=>{const a=[];return!e.email&&!e.phone&&a.push("contact information"),e.genre||a.push("genre"),(!e.bio||e.bio.length<50)&&a.push("detailed bio"),e.image||a.push("profile image"),(!e.managers||e.managers.length===0)&&a.push("manager information"),{valid:a.length===0,missing:a.length>0?a:void 0}}},Y=(e,a,t)=>({data:e,meta:{request_id:a,timestamp:new Date().toISOString(),version:"1.0.0",status:"success",message:t==null?void 0:t.message,pagination:t==null?void 0:t.pagination,cache:t==null?void 0:t.cache},links:t==null?void 0:t.links}),d={info:(e,a={})=>{console.log(`[ArtistService] ${e}`,a)},error:(e,a={})=>{console.error(`[ArtistService] ${e}`,a)},warn:(e,a={})=>{console.warn(`[ArtistService] ${e}`,a)}},T=(e,a,t)=>Y(e,a,{message:t}),h=(e,a,t,i,r,l)=>{const o={type:`https://docs.trainstation-dashboard.com/errors/${e.toLowerCase()}`,title:a,status:t,detail:i,instance:`/api/v1/request/${r}`,timestamp:new Date().toISOString(),request_id:r};return l&&Object.assign(o,l),{data:o,meta:{request_id:r,timestamp:new Date().toISOString(),version:"1.0.0",status:"error",message:a}}},w=e=>{if(Array.isArray(e))return e.map(w);if(e!==null&&typeof e=="object"){const a={};return Object.entries(e).forEach(([t,i])=>{const r=t.replace(/_([a-z])/g,(l,o)=>o.toUpperCase());a[r]=w(i)}),a}return e},_=e=>{if(Array.isArray(e))return e.map(_);if(e!==null&&typeof e=="object"){const a={};return Object.entries(e).forEach(([t,i])=>{const r=t.replace(/[A-Z]/g,l=>`_${l.toLowerCase()}`);a[r]=_(i)}),a}return e};class x{static async getArtists(a,t=crypto.randomUUID(),i="system"){try{const r=G.parse(a),l=Date.now();d.info("Getting artists",{requestId:t,userId:i,query:r});let o=b.from(this.TABLE_NAME).select("*",{count:"exact"}).range(r.offset,r.offset+r.limit-1).order("created_at",{ascending:!1});r.status&&(o=o.eq("status",r.status)),r.genre&&(o=o.ilike("genre",`%${r.genre}%`)),r.location&&(o=o.ilike("location",`%${r.location}%`)),r.search&&(o=o.or(`name.ilike.%${r.search}%,genre.ilike.%${r.search}%,location.ilike.%${r.search}%`)),r.hasUpcomingPerformances!==void 0&&(r.hasUpcomingPerformances?o=o.not("next_performance","is",null):o=o.is("next_performance",null));const{data:u,error:f,count:n}=await o;if(f)return d.error("Failed to fetch artists",{requestId:t,userId:i,error:f.message}),h("FETCH_FAILED","Failed to fetch artists",500,"An error occurred while retrieving artists",t,{originalError:f.message});const c=(u||[]).map(v=>this.enhanceArtistData(w(v),t)),m=n||0,p=r.offset+r.limit<m;return d.info("Artists fetched successfully",{requestId:t,userId:i,count:c.length,total:m,duration:Date.now()-l}),T({artists:c,total:m,hasMore:p},t)}catch(r){return d.error("Unexpected error in getArtists",{requestId:t,userId:i,error:r instanceof Error?r.message:"Unknown error"}),h("INTERNAL_ERROR","Unexpected error occurred",500,"An unexpected error occurred while fetching artists",t,{originalError:r instanceof Error?r.message:"Unknown error"})}}static async getArtistById(a,t=crypto.randomUUID(),i="system"){try{const r=Z.parse(a),l=Date.now();d.info("Getting artist by ID",{requestId:t,userId:i,artistId:r.id});const{data:o,error:u}=await b.from(this.TABLE_NAME).select("*").eq("id",r.id).single();if(u)return u.code==="PGRST116"?h("ARTIST_NOT_FOUND","Artist not found",404,`No artist found with ID: ${r.id}`,t):(d.error("Failed to fetch artist",{requestId:t,userId:i,artistId:r.id,error:u.message}),h("FETCH_FAILED","Failed to fetch artist",500,"An error occurred while retrieving the artist",t,{originalError:u.message}));const f=this.enhanceArtistData(w(o),t);return d.info("Artist fetched successfully",{requestId:t,userId:i,artistId:r.id,duration:Date.now()-l}),T(f,t)}catch(r){return d.error("Unexpected error in getArtistById",{requestId:t,userId:i,error:r instanceof Error?r.message:"Unknown error"}),h("INTERNAL_ERROR","Unexpected error occurred",500,"An unexpected error occurred while fetching the artist",t,{originalError:r instanceof Error?r.message:"Unknown error"})}}static async createArtist(a,t=crypto.randomUUID(),i="system"){try{const r=H.parse(a),l=Date.now();d.info("Creating artist",{requestId:t,userId:i,artistName:r.name});const o=_({...r,created_by:i,updated_by:i,created_at:new Date().toISOString(),updated_at:new Date().toISOString()}),{data:u,error:f}=await b.from(this.TABLE_NAME).insert(o).select().single();if(f)return d.error("Failed to create artist",{requestId:t,userId:i,error:f.message}),h("CREATE_FAILED","Failed to create artist",500,"An error occurred while creating the artist",t,{originalError:f.message});const n=this.enhanceArtistData(w(u),t);return d.info("Artist created successfully",{requestId:t,userId:i,artistId:u.id,artistName:r.name,duration:Date.now()-l}),T(n,t)}catch(r){return r instanceof Error&&r.name==="ZodError"?h("VALIDATION_ERROR","Validation failed",400,"The provided artist data is invalid",t,{validationErrors:r.errors}):(d.error("Unexpected error in createArtist",{requestId:t,userId:i,error:r instanceof Error?r.message:"Unknown error"}),h("INTERNAL_ERROR","Unexpected error occurred",500,"An unexpected error occurred while creating the artist",t,{originalError:r instanceof Error?r.message:"Unknown error"}))}}static async updateArtist(a,t=crypto.randomUUID(),i="system"){try{const r=V.parse(a),l=Date.now();d.info("Updating artist",{requestId:t,userId:i,artistId:r.id});const o=await this.getArtistById({id:r.id},t,i);if("data"in o&&"type"in o.data)return o;const u=o.data;if(r.status&&r.status!==u.status){const g=z.canChangeStatus(u,r.status);if(!g.valid)return h("BUSINESS_RULE_VIOLATION","Status change not allowed",400,g.reason||"Status change violates business rules",t)}const{id:f,...n}=r,c=_({...n,updated_by:i,updated_at:new Date().toISOString()}),{data:m,error:p}=await b.from(this.TABLE_NAME).update(c).eq("id",r.id).select().single();if(p)return d.error("Failed to update artist",{requestId:t,userId:i,artistId:r.id,error:p.message}),h("UPDATE_FAILED","Failed to update artist",500,"An error occurred while updating the artist",t,{originalError:p.message});const v=this.enhanceArtistData(w(m),t);return d.info("Artist updated successfully",{requestId:t,userId:i,artistId:r.id,duration:Date.now()-l}),T(v,t)}catch(r){return r instanceof Error&&r.name==="ZodError"?h("VALIDATION_ERROR","Validation failed",400,"The provided artist data is invalid",t,{validationErrors:r.errors}):(d.error("Unexpected error in updateArtist",{requestId:t,userId:i,error:r instanceof Error?r.message:"Unknown error"}),h("INTERNAL_ERROR","Unexpected error occurred",500,"An unexpected error occurred while updating the artist",t,{originalError:r instanceof Error?r.message:"Unknown error"}))}}static enhanceArtistData(a,t){var p,v;const i=a,r=i.performanceHistory||[],l=r.length,o=r.reduce((g,D)=>g+D.revenue,0),u=l>0?Math.round(r.reduce((g,D)=>g+D.attendance,0)/l):0,f=r.map(g=>({...g,date:new Date(g.date)})).sort((g,D)=>g.date.getTime()-D.date.getTime()),n=new Date,c=(p=f.filter(g=>g.date<n).pop())==null?void 0:p.date.toISOString(),m=(v=f.find(g=>g.date>n))==null?void 0:v.date.toISOString();return i.metrics={totalPerformances:l,totalRevenue:o,averageAttendance:u,lastPerformanceDate:c,nextPerformanceDate:m},i}}O(x,"TABLE_NAME","artists");const U=e=>{var a;if("type"in e.data&&"status"in e.data){const t=e.data;throw{type:t.status===422?"validation":t.status===401?"authentication":t.status===403?"authorization":t.status===404?"not_found":"server",message:t.detail||"Operation failed",details:t,fieldErrors:(a=t.errors)==null?void 0:a.reduce((r,l)=>({...r,[l.field]:l.message}),{})}}if(e.meta.status==="error")throw{type:"server",message:e.meta.message||"Operation failed",details:e};return e.data};function q(e){const a=Q(),t=N({queryKey:["artists",e],queryFn:async()=>{const n=await x.getArtists({});return U(n)},staleTime:5*60*1e3,cacheTime:10*60*1e3}),i=L({mutationFn:async n=>{const c=await x.createArtist(n);return U(c)},onSuccess:n=>{a.invalidateQueries({queryKey:["artists"]}),a.setQueryData(["artists","all"],c=>c?[n,...c]:[n]),E.success("Artist created successfully!")},onError:n=>{const c=n.fieldErrors?Object.values(n.fieldErrors).join(", "):n.message;E.error(`Error creating artist: ${c}`)}}),r=L({mutationFn:async({id:n,updates:c})=>{const m=await x.updateArtist({id:n,...c});return U(m)},onSuccess:n=>{a.invalidateQueries({queryKey:["artists"]}),a.setQueryData(["artists",n.id],n),a.setQueryData(["artists","all"],c=>c?c.map(m=>m.id===n.id?n:m):[n]),E.success("Artist updated successfully!")},onError:n=>{const c=n.fieldErrors?Object.values(n.fieldErrors).join(", "):n.message;E.error(`Error updating artist: ${c}`)}}),l=L({mutationFn:async n=>{throw new Error("Delete functionality not implemented in ArtistService")},onSuccess:(n,c)=>{a.invalidateQueries({queryKey:["artists"]}),a.removeQueries({queryKey:["artists",c]}),a.setQueryData(["artists","all"],m=>m?m.filter(p=>p.id!==c):[]),E.success("Artist deleted successfully!")},onError:n=>{E.error(`Error deleting artist: ${n.message}`)}}),o=C.useCallback(async n=>{try{return{success:!0,artist:await i.mutateAsync(n)}}catch(c){return{success:!1,error:c}}},[i]),u=C.useCallback(async(n,c)=>{try{return{success:!0,artist:await r.mutateAsync({id:n,updates:c})}}catch(m){return{success:!1,error:m}}},[r]),f=C.useCallback(async n=>{try{return await l.mutateAsync(n),{success:!0}}catch(c){return{success:!1,error:c}}},[l]);return{artists:t.data||[],isLoading:t.isLoading,isError:t.isError,error:t.error,createArtist:o,updateArtist:u,deleteArtist:f,createArtistMutation:i.mutate,updateArtistMutation:r.mutate,deleteArtistMutation:l.mutate,isCreating:i.isPending,isUpdating:r.isPending,isDeleting:l.isPending,refetch:t.refetch,invalidate:()=>a.invalidateQueries({queryKey:["artists"]})}}function ee(e){const a=N({queryKey:["artists",e],queryFn:async()=>{if(!e)throw new Error("Artist ID is required");const t=await x.getArtistById(e);return U(t)},enabled:!!e,staleTime:3e5,cacheTime:6e5});return{artist:a.data,isLoading:a.isLoading,isError:a.isError,error:a.error,refetch:a.refetch}}export{ee as a,q as u};
