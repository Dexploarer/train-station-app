var O=Object.defineProperty;var $=(r,t,e)=>t in r?O(r,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):r[t]=e;var _=(r,t,e)=>$(r,typeof t!="symbol"?t+"":t,e);import{u as F,a as R}from"./useMutation-Chvc8RUs.js";import{s as Q,r as S,h as g}from"./index-FKmzij_1.js";import{S as N,v as P,a as v,U as w}from"./validation-Bq8tbDJB.js";import{o as l,e as f,n as T,b as y,s as n,a as q}from"./types-D9u2zvev.js";const x=T().min(0,"Amount must be positive"),j=T().min(0).max(1,"Tax rate must be between 0 and 1"),U=l({name:n().min(1,"Account name is required").max(100,"Account name must be less than 100 characters").trim(),type:f(["asset","liability","equity","revenue","expense"]).describe("Type of account"),subtype:f(["checking","savings","cash","accounts_receivable","inventory","accounts_payable","credit_card","loan","equity","sales_revenue","service_revenue","other_revenue","cost_of_goods","operating_expense","administrative_expense"]).describe("Account subtype"),description:n().max(500,"Description must be less than 500 characters").optional(),accountNumber:n().max(50,"Account number must be less than 50 characters").optional(),isActive:y().default(!0),parentAccountId:n().uuid().optional()}),V=U;l({id:n().uuid("Invalid account ID")}).merge(U.partial());const G=l({name:n().min(1,"Category name is required").max(100,"Category name must be less than 100 characters").trim(),type:f(["income","expense"]).describe("Whether this category represents income or expense"),description:n().max(500,"Description must be less than 500 characters").optional(),color:n().regex(/^#[0-9A-Fa-f]{6}$/,"Invalid color format (use #RRGGBB)").optional(),taxDeductible:y().default(!1),requiresReceipt:y().default(!1),budgetLimit:x.optional(),parentCategoryId:n().uuid().optional(),isActive:y().default(!0)});l({id:n().uuid("Invalid category ID")}).merge(G.partial());const L=l({type:f(["income","expense","transfer","adjustment","refund"]).describe("Type of financial transaction"),amount:x.describe("Transaction amount"),currency:n().length(3,"Currency must be 3-character code (e.g., USD)").default("USD"),description:n().min(1,"Description is required").max(500,"Description must be less than 500 characters").trim(),categoryId:n().uuid("Invalid category ID"),accountId:n().uuid("Invalid account ID"),toAccountId:n().uuid().optional(),date:n().datetime().default(()=>new Date().toISOString()),reference:n().max(100,"Reference must be less than 100 characters").optional(),receiptUrl:n().url("Invalid receipt URL").optional(),taxAmount:x.optional(),taxRate:j.optional(),isRecurring:y().default(!1),recurringPattern:l({frequency:f(["daily","weekly","monthly","quarterly","yearly"]),interval:T().min(1).max(365),endDate:n().datetime().optional()}).optional(),tags:q(n().trim().min(1)).max(20,"Maximum 20 tags allowed").default([]),relatedEntityId:n().uuid().optional(),relatedEntityType:f(["event","artist","customer","vendor","equipment"]).optional(),staffMember:n().max(100,"Staff member name must be less than 100 characters").optional(),notes:n().max(1e3,"Notes must be less than 1000 characters").optional(),isApproved:y().default(!1),approvedBy:n().max(100).optional(),approvedAt:n().datetime().optional()}),W=L.refine(r=>!(r.type==="transfer"&&!r.toAccountId),{message:"Transfer transactions must specify destination account",path:["toAccountId"]}).refine(r=>!(r.taxAmount&&r.taxAmount>r.amount),{message:"Tax amount cannot exceed transaction amount",path:["taxAmount"]}).refine(r=>!(r.isRecurring&&!r.recurringPattern),{message:"Recurring transactions must specify pattern",path:["recurringPattern"]}).refine(r=>!(r.relatedEntityId&&!r.relatedEntityType),{message:"Related entity type is required when related entity ID is provided",path:["relatedEntityType"]}),z=l({id:n().uuid("Invalid transaction ID")}).merge(L.partial()).refine(r=>!(r.type==="transfer"&&r.toAccountId===void 0),{message:"Transfer transactions must specify destination account",path:["toAccountId"]}),H=l({search:n().optional(),type:f(["income","expense","transfer","adjustment","refund"]).optional(),categoryId:n().uuid().optional(),accountId:n().uuid().optional(),dateRange:l({start:n().datetime().optional(),end:n().datetime().optional()}).optional(),amountRange:l({min:x.optional(),max:x.optional()}).optional(),tags:q(n()).optional(),currency:n().length(3).optional(),isRecurring:y().optional(),isApproved:y().optional(),staffMember:n().optional(),relatedEntityType:f(["event","artist","customer","vendor","equipment"]).optional(),hasReceipt:y().optional(),page:T().min(1).default(1),limit:T().min(1).max(100).default(20),offset:T().min(0).default(0),sortBy:f(["date","amount","description","category","type"]).default("date"),sortOrder:f(["asc","desc"]).default("desc")});l({reportType:f(["profit_loss","balance_sheet","cash_flow","expense_report","revenue_report"]),dateRange:l({start:n().datetime(),end:n().datetime()}),includeSubcategories:y().default(!0),currency:n().length(3).default("USD"),compareToLastPeriod:y().default(!1),groupBy:f(["category","account","month","quarter"]).optional()});const k=l({name:n().min(1,"Budget name is required").max(100,"Budget name must be less than 100 characters").trim(),categoryId:n().uuid("Invalid category ID"),amount:x.describe("Budget amount"),period:f(["monthly","quarterly","yearly"]),startDate:n().datetime(),endDate:n().datetime(),alertThreshold:T().min(0).max(1).default(.8).describe("Alert when spending reaches this percentage of budget"),isActive:y().default(!0)}),J=k.refine(r=>new Date(r.endDate)>new Date(r.startDate),{message:"End date must be after start date",path:["endDate"]});l({id:n().uuid("Invalid budget ID")}).merge(k.partial());l({transactionIds:q(n().uuid()).min(1).max(100),updates:l({categoryId:n().uuid().optional(),tags:q(n()).optional(),isApproved:y().optional(),approvedBy:n().max(100).optional()})});l({transactionIds:q(n().uuid()).min(1).max(100),approve:y(),approvedBy:n().min(1,"Approver name is required").max(100,"Approver name must be less than 100 characters")});const C=l({id:n().uuid("Invalid transaction ID")});l({id:n().uuid("Invalid account ID")});l({id:n().uuid("Invalid category ID")});l({id:n().uuid("Invalid budget ID")});const B={canDeleteTransaction:r=>r.isApproved?{valid:!1,reason:"Cannot delete approved transactions. Please unapprove first."}:r.isRecurring?{valid:!1,reason:"Cannot delete recurring transactions. Disable recurring pattern first."}:{valid:!0},canApproveTransaction:(r,t)=>r.isApproved?{valid:!1,reason:"Transaction is already approved"}:r.staffMember===t?{valid:!1,reason:"Cannot approve your own transactions"}:{valid:!0},canEditTransaction:r=>r.isApproved?{valid:!1,reason:"Cannot edit approved transactions"}:{valid:!0},validateTransactionAmount:(r,t)=>t.type==="asset"&&t.balance<r?{valid:!1,reason:"Insufficient funds in account"}:{valid:!0},checkBudgetCompliance:(r,t)=>{if(!t||r.type!=="expense")return{valid:!0};const e=(t.spent||0)+r.amount,a=e/t.amount;return a>1?{valid:!1,reason:`Transaction would exceed budget by $${(e-t.amount).toFixed(2)}`}:a>t.alertThreshold?{valid:!0,warning:`Transaction will use ${(a*100).toFixed(1)}% of budget`}:{valid:!0}},validateRecurringPattern:r=>{const t=[];return r.frequency||t.push("Frequency is required for recurring transactions"),(!r.interval||r.interval<1)&&t.push("Interval must be at least 1"),r.frequency==="daily"&&r.interval>365&&t.push("Daily interval cannot exceed 365 days"),r.endDate&&new Date(r.endDate)<=new Date&&t.push("End date must be in the future"),{valid:t.length===0,errors:t}},calculateTaxAmount:(r,t)=>Math.round(r*t*100)/100,calculateNetAmount:(r,t)=>r-(t||0)};class X{constructor(){_(this,"adapter");this.adapter=new N}async getTransactions(t={}){const e={limit:20,offset:0,...t},a=P(H,e);if(!a.success)return a.error;const{limit:i,offset:o,type:d,category:u,status:p,accountId:s,dateFrom:c,dateTo:m,search:D}=a.data,h={select:`
        *,
        accounts(*),
        transaction_approvals(*),
        transaction_receipts(*)
      `,orderBy:{column:"date",ascending:!1},limit:i,offset:o,filters:{}};d&&(h.filters.type=d),u&&(h.filters.category=u),p&&(h.filters.status=p),s&&(h.filters.account_id=s),c&&(h.filters.date={operator:"gte",value:c}),m&&(h.filters.date={operator:"lte",value:m});const I=await this.adapter.executeQuery({tableName:"transactions",rateLimitKey:"finance:transactions:read",enableLogging:!0},async()=>{let E=this.adapter.buildQuery("transactions",h);return D&&(E=E.or(`description.ilike.%${D}%, reference.ilike.%${D}%, notes.ilike.%${D}%`)),E},"read");if(I.success){const M=(Array.isArray(I.data)?I.data:[I.data]).map(K=>this.transformTransactionFromDb(K));return{...I,data:M}}return I}async getEnhancedTransactions(t={}){const e=await this.getTransactions(t);if(!e.success)return e;const a=await Promise.all(e.data.map(async i=>{const o=await this.calculateTransactionMetrics(i.id);return{...i,metrics:o.success?o.data:void 0}}));return{...e,data:a}}async getTransactionById(t){const e=v(C,{id:t});if(!e.success)return e.error;const a=await this.adapter.executeQuery({tableName:"transactions",rateLimitKey:"finance:transactions:read",enableLogging:!0},async()=>this.adapter.buildQuery("transactions",{select:`
            *,
            accounts(*),
            transaction_approvals(*),
            transaction_receipts(*)
          `,filters:{id:t}}),"read");return a.success?{...a,data:this.transformTransactionFromDb(a.data)}:a}async createTransaction(t){const e=v(W,t);if(!e.success)return e.error;const a=e.data,i=B.validateApprovalWorkflow(a);if(!i.valid)return{success:!1,error:{type:"https://docs.trainstation-dashboard.com/errors/business-rule-violation",title:"Business Rule Violation",status:400,detail:i.reason||"Transaction data violates business rules",instance:"/api/finance/transactions",timestamp:new Date().toISOString()},meta:{requestId:crypto.randomUUID(),source:"validation"}};if(a.type==="expense"){const d=await this.checkBudgetCompliance(a);if(!d.valid)return{success:!1,error:{type:"https://docs.trainstation-dashboard.com/errors/budget-violation",title:"Budget Compliance Violation",status:400,detail:d.reason||"Transaction exceeds budget limits",instance:"/api/finance/transactions",timestamp:new Date().toISOString()},meta:{requestId:crypto.randomUUID(),source:"budget-validation"}}}const o=await this.adapter.executeQuery({tableName:"transactions",requiredRole:w.STAFF,rateLimitKey:"finance:transactions:create",enableLogging:!0},async()=>{const d=this.adapter.toSnakeCase({type:a.type,category:a.category,amount:a.amount,description:a.description,date:a.date,accountId:a.accountId,transferToAccountId:a.transferToAccountId,reference:a.reference,taxAmount:a.taxAmount,taxRate:a.taxRate,status:a.status||"pending",approvedBy:a.approvedBy,approvedAt:a.approvedAt,receiptUrl:a.receiptUrl,notes:a.notes,tags:a.tags||[],metadata:a.metadata,createdBy:a.createdBy});return this.adapter.buildQuery("transactions").insert([d]).select("*")},"write");if(o.success){const d=Array.isArray(o.data)?o.data:[o.data];return{...o,data:this.transformTransactionFromDb(d[0])}}return o}async updateTransaction(t,e){const a=v(C,{id:t});if(!a.success)return a.error;const i=v(z.omit({id:!0}),e);if(!i.success)return i.error;const o=await this.getTransactionById(t);if(!o.success)return o;const d=o.data,u=B.canEdit(d);if(!u.valid)return{success:!1,error:{type:"https://docs.trainstation-dashboard.com/errors/business-rule-violation",title:"Business Rule Violation",status:400,detail:u.reason||"Cannot edit this transaction",instance:`/api/finance/transactions/${t}`,timestamp:new Date().toISOString()},meta:{requestId:crypto.randomUUID(),source:"validation"}};const p=await this.adapter.executeQuery({tableName:"transactions",requiredRole:w.STAFF,rateLimitKey:"finance:transactions:update",enableLogging:!0},async()=>{const s=this.adapter.toSnakeCase({...i.data,updated_at:new Date().toISOString()});return this.adapter.buildQuery("transactions").update(s).eq("id",t).select("*")},"write");if(p.success){const s=Array.isArray(p.data)?p.data:[p.data];return{...p,data:this.transformTransactionFromDb(s[0])}}return p}async approveTransaction(t,e,a){const i=v(C,{id:t});if(!i.success)return i.error;const o=await this.getTransactionById(t);if(!o.success)return o;const d=o.data,u=B.canApprove(d,e);return u.valid?this.updateTransaction(t,{status:"approved",approvedBy:e,approvedAt:new Date().toISOString(),notes:a?`${d.notes||""}
Approval: ${a}`.trim():d.notes}):{success:!1,error:{type:"https://docs.trainstation-dashboard.com/errors/business-rule-violation",title:"Cannot Approve Transaction",status:400,detail:u.reason||"Transaction cannot be approved",instance:`/api/finance/transactions/${t}/approve`,timestamp:new Date().toISOString()},meta:{requestId:crypto.randomUUID(),source:"validation"}}}async deleteTransaction(t,e=!1){const a=v(C,{id:t});if(!a.success)return a.error;const i=await this.getTransactionById(t);if(!i.success)return i;const o=i.data,d=B.canDelete(o);if(!d.valid)return{success:!1,error:{type:"https://docs.trainstation-dashboard.com/errors/business-rule-violation",title:"Cannot Delete Transaction",status:400,detail:d.reason||"Transaction cannot be deleted",instance:`/api/finance/transactions/${t}`,timestamp:new Date().toISOString()},meta:{requestId:crypto.randomUUID(),source:"validation"}};if(e){const u=await this.adapter.executeQuery({tableName:"transactions",requiredRole:w.ADMIN,rateLimitKey:"finance:transactions:delete",enableLogging:!0},async()=>this.adapter.buildQuery("transactions").delete().eq("id",t),"write");return u.success?{...u,data:{deleted:!0}}:u}else{const u=await this.updateTransaction(t,{status:"cancelled"});return u.success?{success:!0,data:{deleted:!0},meta:u.meta}:u}}async getAccounts(){const t=await this.adapter.executeQuery({tableName:"accounts",rateLimitKey:"finance:accounts:read",enableLogging:!0},async()=>this.adapter.buildQuery("accounts",{select:"*",orderBy:{column:"name",ascending:!0}}),"read");if(t.success){const a=(Array.isArray(t.data)?t.data:[t.data]).map(i=>this.transformAccountFromDb(i));return{...t,data:a}}return t}async createAccount(t){const e=v(V,t);if(!e.success)return e.error;const a=e.data,i=await this.adapter.executeQuery({tableName:"accounts",requiredRole:w.MANAGER,rateLimitKey:"finance:accounts:create",enableLogging:!0},async()=>{const o=this.adapter.toSnakeCase({name:a.name,type:a.type,number:a.number,description:a.description,parentId:a.parentId,isActive:a.isActive!==!1,balance:a.balance||0,currency:a.currency||"USD"});return this.adapter.buildQuery("accounts").insert([o]).select("*")},"write");if(i.success){const o=Array.isArray(i.data)?i.data:[i.data];return{...i,data:this.transformAccountFromDb(o[0])}}return i}async getBudgets(){const t=await this.adapter.executeQuery({tableName:"budgets",rateLimitKey:"finance:budgets:read",enableLogging:!0},async()=>this.adapter.buildQuery("budgets",{select:"*",orderBy:{column:"period_start",ascending:!1}}),"read");if(t.success){const a=(Array.isArray(t.data)?t.data:[t.data]).map(i=>this.transformBudgetFromDb(i));return{...t,data:a}}return t}async createBudget(t){const e=v(J,t);if(!e.success)return e.error;const a=e.data,i=await this.adapter.executeQuery({tableName:"budgets",requiredRole:w.MANAGER,rateLimitKey:"finance:budgets:create",enableLogging:!0},async()=>{const o=this.adapter.toSnakeCase({name:a.name,category:a.category,amount:a.amount,spent:a.spent||0,periodStart:a.periodStart,periodEnd:a.periodEnd,alertThreshold:a.alertThreshold||80,isActive:a.isActive!==!1,notes:a.notes});return this.adapter.buildQuery("budgets").insert([o]).select("*")},"write");if(i.success){const o=Array.isArray(i.data)?i.data:[i.data];return{...i,data:this.transformBudgetFromDb(o[0])}}return i}async generateReport(t,e,a){return{success:!0,data:{type:t,periodStart:e||new Date(Date.now()-2592e6).toISOString(),periodEnd:a||new Date().toISOString(),generatedAt:new Date().toISOString(),data:{},summary:{totalRevenue:0,totalExpenses:0,netIncome:0,grossMargin:0}},meta:{requestId:crypto.randomUUID(),source:"reporting"}}}async getProfitAndLossReport(t,e){return this.generateReport("profit_loss",t,e)}async getBalanceSheetReport(t,e){return this.generateReport("balance_sheet",t,e)}async getCashFlowReport(t,e){return this.generateReport("cash_flow",t,e)}async checkBudgetCompliance(t){return{valid:!0}}async calculateTransactionMetrics(t){return{success:!0,data:{impactOnCashFlow:0,budgetUtilization:0,categoryTotal:0,taxImpact:0},meta:{requestId:crypto.randomUUID(),source:"calculation"}}}transformTransactionFromDb(t){const e=this.adapter.toCamelCase(t);return{id:e.id,type:e.type,category:e.category,amount:e.amount,description:e.description,date:e.date,accountId:e.accountId,transferToAccountId:e.transferToAccountId||void 0,reference:e.reference||void 0,taxAmount:e.taxAmount||void 0,taxRate:e.taxRate||void 0,status:e.status,approvedBy:e.approvedBy||void 0,approvedAt:e.approvedAt||void 0,receiptUrl:e.receiptUrl||void 0,notes:e.notes||void 0,tags:e.tags||[],metadata:e.metadata||void 0,createdBy:e.createdBy,createdAt:e.createdAt,updatedAt:e.updatedAt}}transformAccountFromDb(t){const e=this.adapter.toCamelCase(t);return{id:e.id,name:e.name,type:e.type,number:e.number||void 0,description:e.description||void 0,parentId:e.parentId||void 0,isActive:e.isActive,balance:e.balance,currency:e.currency,createdAt:e.createdAt,updatedAt:e.updatedAt}}transformBudgetFromDb(t){const e=this.adapter.toCamelCase(t);return{id:e.id,name:e.name,category:e.category,amount:e.amount,spent:e.spent,periodStart:e.periodStart,periodEnd:e.periodEnd,alertThreshold:e.alertThreshold,isActive:e.isActive,notes:e.notes||void 0,createdAt:e.createdAt,updatedAt:e.updatedAt}}}const b=new X,A=r=>{var t,e,a,i,o,d,u;if(!r.success)throw{type:((t=r.error)==null?void 0:t.status)===422?"validation":((e=r.error)==null?void 0:e.status)===401?"authentication":((a=r.error)==null?void 0:a.status)===403?"authorization":((i=r.error)==null?void 0:i.status)===404?"not_found":"server",message:((o=r.error)==null?void 0:o.detail)||"Operation failed",details:r.error,fieldErrors:(u=(d=r.error)==null?void 0:d.errors)==null?void 0:u.reduce((s,c)=>({...s,[c.field]:c.message}),{})};return r.data};function re(r){const t=Q(),e=F({queryKey:["financial_transactions",r],queryFn:async()=>{const s=await b.getTransactions(r);return A(s)},staleTime:5*60*1e3,cacheTime:10*60*1e3}),a=R({mutationFn:async s=>{const c=await b.createTransaction(s);return A(c)},onSuccess:s=>{t.invalidateQueries({queryKey:["financial_transactions"]}),t.setQueryData(["financial_transactions","all"],c=>c?[s,...c]:[s]),g.success("Transaction created successfully!")},onError:s=>{const c=s.fieldErrors?Object.values(s.fieldErrors).join(", "):s.message;g.error(`Error creating transaction: ${c}`)}}),i=R({mutationFn:async({id:s,updates:c})=>{const m=await b.updateTransaction(s,c);return A(m)},onSuccess:s=>{t.invalidateQueries({queryKey:["financial_transactions"]}),t.setQueryData(["financial_transactions",s.id],s),t.setQueryData(["financial_transactions","all"],c=>c?c.map(m=>m.id===s.id?s:m):[s]),g.success("Transaction updated successfully!")},onError:s=>{const c=s.fieldErrors?Object.values(s.fieldErrors).join(", "):s.message;g.error(`Error updating transaction: ${c}`)}}),o=R({mutationFn:async s=>{const c=await b.deleteTransaction(s);return A(c)},onSuccess:(s,c)=>{t.invalidateQueries({queryKey:["financial_transactions"]}),t.removeQueries({queryKey:["financial_transactions",c]}),t.setQueryData(["financial_transactions","all"],m=>m?m.filter(D=>D.id!==c):[]),g.success("Transaction deleted successfully!")},onError:s=>{g.error(`Error deleting transaction: ${s.message}`)}}),d=S.useCallback(async s=>{try{return{success:!0,transaction:await a.mutateAsync(s)}}catch(c){return{success:!1,error:c}}},[a]),u=S.useCallback(async(s,c)=>{try{return{success:!0,transaction:await i.mutateAsync({id:s,updates:c})}}catch(m){return{success:!1,error:m}}},[i]),p=S.useCallback(async s=>{try{return await o.mutateAsync(s),{success:!0}}catch(c){return{success:!1,error:c}}},[o]);return{transactions:e.data||[],isLoading:e.isLoading,isError:e.isError,error:e.error,createTransaction:d,updateTransaction:u,deleteTransaction:p,createTransactionMutation:a.mutate,updateTransactionMutation:i.mutate,deleteTransactionMutation:o.mutate,isCreating:a.isPending,isUpdating:i.isPending,isDeleting:o.isPending,refetch:e.refetch,invalidate:()=>t.invalidateQueries({queryKey:["financial_transactions"]})}}function ne(r){const t=Q(),e=F({queryKey:["event_finances",r],queryFn:async()=>{if(!r)throw new Error("Event ID is required");const u=await b.getEventFinancialSummary(r);return A(u)},enabled:!!r,staleTime:5*60*1e3,cacheTime:10*60*1e3}),a=R({mutationFn:async({eventId:u,amount:p,source:s})=>{const c=await b.recordEventRevenue(u,p,s);return A(c)},onSuccess:()=>{t.invalidateQueries({queryKey:["event_finances",r]}),t.invalidateQueries({queryKey:["financial_transactions"]}),g.success("Revenue recorded successfully!")},onError:u=>{g.error(`Error recording revenue: ${u.message}`)}}),i=R({mutationFn:async({eventId:u,amount:p,category:s,description:c})=>{const m=await b.recordEventExpense(u,p,s,c);return A(m)},onSuccess:()=>{t.invalidateQueries({queryKey:["event_finances",r]}),t.invalidateQueries({queryKey:["financial_transactions"]}),g.success("Expense recorded successfully!")},onError:u=>{g.error(`Error recording expense: ${u.message}`)}}),o=S.useCallback(async(u,p)=>{try{return{success:!0,transaction:await a.mutateAsync({eventId:r,amount:u,source:p})}}catch(s){return{success:!1,error:s}}},[a,r]),d=S.useCallback(async(u,p,s)=>{try{return{success:!0,transaction:await i.mutateAsync({eventId:r,amount:u,category:p,description:s})}}catch(c){return{success:!1,error:c}}},[i,r]);return{eventFinances:e.data,isLoading:e.isLoading,isError:e.isError,error:e.error,recordRevenue:o,recordExpense:d,isRecordingRevenue:a.isPending,isRecordingExpense:i.isPending,refetch:e.refetch}}export{ne as a,re as u};
