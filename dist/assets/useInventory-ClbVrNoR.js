var $=Object.defineProperty;var B=(r,a,e)=>a in r?$(r,a,{enumerable:!0,configurable:!0,writable:!0,value:e}):r[a]=e;var F=(r,a,e)=>B(r,typeof a!="symbol"?a+"":a,e);import{u as A,a as S}from"./useMutation-Chvc8RUs.js";import{s as R,r as b,h as y}from"./index-FKmzij_1.js";import{S as j,v as H,a as I,U as x}from"./validation-Bq8tbDJB.js";import{o as m,e as g,n as k,b as _,a as P,s as d}from"./types-D9u2zvev.js";const h=k().min(0,"Value must be positive"),q=k().min(0,"Price must be positive"),U=m({name:d().min(1,"Category name is required").max(100,"Category name must be less than 100 characters").trim(),description:d().max(500,"Description must be less than 500 characters").optional(),color:d().regex(/^#[0-9A-Fa-f]{6}$/,"Invalid color format (use #RRGGBB)").optional(),isActive:_().default(!0)}),V=U;m({id:d().uuid("Invalid category ID")}).merge(U.partial());const K=m({name:d().min(1,"Item name is required").max(150,"Item name must be less than 150 characters").trim(),description:d().max(1e3,"Description must be less than 1000 characters").optional(),sku:d().min(1,"SKU is required").max(50,"SKU must be less than 50 characters").trim().regex(/^[A-Za-z0-9-_]+$/,"SKU can only contain letters, numbers, hyphens, and underscores"),categoryId:d().uuid("Invalid category ID"),unit:g(["piece","box","case","bottle","kg","lb","liter","gallon","meter","yard"]).describe("Unit of measurement for inventory"),currentStock:h.describe("Current stock quantity"),minStockLevel:h.describe("Minimum stock level before reorder alert"),maxStockLevel:h.describe("Maximum stock level for optimal inventory"),reorderPoint:h.describe("Stock level that triggers reorder"),reorderQuantity:h.describe("Quantity to order when restocking"),costPrice:q.describe("Cost price per unit"),sellPrice:q.optional().describe("Selling price per unit"),supplier:d().max(200,"Supplier name must be less than 200 characters").optional(),location:d().max(100,"Location must be less than 100 characters").optional(),tags:P(d().trim().min(1)).max(20,"Maximum 20 tags allowed").default([]),isActive:_().default(!0),trackStock:_().default(!0),allowNegativeStock:_().default(!1)}),z=K.refine(r=>r.minStockLevel<=r.currentStock,{message:"Current stock cannot be less than minimum stock level",path:["currentStock"]}).refine(r=>r.minStockLevel<=r.maxStockLevel,{message:"Minimum stock level cannot exceed maximum stock level",path:["minStockLevel"]}).refine(r=>r.reorderPoint>=r.minStockLevel,{message:"Reorder point should be at or above minimum stock level",path:["reorderPoint"]}).refine(r=>r.reorderQuantity>0,{message:"Reorder quantity must be greater than zero",path:["reorderQuantity"]}).refine(r=>!r.sellPrice||r.sellPrice>r.costPrice,{message:"Selling price should be greater than cost price",path:["sellPrice"]}),G=m({id:d().uuid("Invalid inventory ID")}).merge(K.partial().omit({sku:!0})).refine(r=>r.minStockLevel!==void 0&&r.maxStockLevel!==void 0?r.minStockLevel<=r.maxStockLevel:!0,{message:"Minimum stock level cannot exceed maximum stock level",path:["minStockLevel"]}),X=m({inventoryId:d().uuid("Invalid inventory ID"),type:g(["in","out","adjustment","transfer","damaged","expired"]).describe("Type of stock transaction"),quantity:k().min(.01,"Quantity must be greater than zero").describe("Transaction quantity"),reason:d().min(1,"Reason is required").max(500,"Reason must be less than 500 characters"),reference:d().max(100,"Reference must be less than 100 characters").optional().describe("External reference (PO number, invoice, etc.)"),cost:q.optional().describe("Cost per unit for this transaction"),staffMember:d().max(100,"Staff member name must be less than 100 characters").optional(),relatedEntityId:d().uuid().optional(),relatedEntityType:g(["sale","purchase","event","maintenance"]).optional(),notes:d().max(1e3,"Notes must be less than 1000 characters").optional()}),W=X.refine(r=>!(r.type==="out"&&(!r.reason||r.reason.trim().length<3)),{message:"Stock out transactions require detailed reason",path:["reason"]}).refine(r=>!(r.relatedEntityId&&!r.relatedEntityType),{message:"Related entity type is required when related entity ID is provided",path:["relatedEntityType"]}),Z=m({search:d().optional(),categoryId:d().uuid().optional(),supplier:d().optional(),location:d().optional(),tags:P(d()).optional(),stockStatus:g(["low","normal","high","out"]).optional(),isActive:_().optional(),trackStock:_().optional(),priceRange:m({min:q.optional(),max:q.optional()}).optional(),stockRange:m({min:h.optional(),max:h.optional()}).optional(),page:k().min(1).default(1),limit:k().min(1).max(100).default(20),offset:k().min(0).default(0),sortBy:g(["name","sku","currentStock","costPrice","sellPrice","lastUpdated"]).default("name"),sortOrder:g(["asc","desc"]).default("asc")});m({inventoryId:d().uuid().optional(),type:g(["in","out","adjustment","transfer","damaged","expired"]).optional(),staffMember:d().optional(),dateRange:m({start:d().datetime().optional(),end:d().datetime().optional()}).optional(),reference:d().optional(),relatedEntityType:g(["sale","purchase","event","maintenance"]).optional(),page:k().min(1).default(1),limit:k().min(1).max(100).default(20),offset:k().min(0).default(0),sortBy:g(["date","type","quantity","staffMember"]).default("date"),sortOrder:g(["asc","desc"]).default("desc")});m({adjustments:P(m({inventoryId:d().uuid(),newQuantity:h,reason:d().min(1).max(500)})).min(1).max(50,"Maximum 50 adjustments per batch"),staffMember:d().max(100).optional()});m({inventoryId:d().uuid(),alertType:g(["low_stock","out_of_stock","overstock","reorder_point"]),threshold:h.optional(),enabled:_().default(!0)});const E=m({id:d().uuid("Invalid inventory ID")});m({id:d().uuid("Invalid category ID")});m({id:d().uuid("Invalid transaction ID")});const L={canDelete:r=>(r.current_stock??0)>0?{valid:!1,reason:"Cannot delete item with current stock. Adjust stock to zero first."}:{valid:!0},canAdjustStock:(r,a)=>{const e=r.trackStock??!0,t=r.allowNegativeStock??!1;return e?a<0&&!t?{valid:!1,reason:"Negative stock not allowed for this item"}:{valid:!0}:{valid:!1,reason:"Cannot adjust stock for non-tracked items"}},canProcessTransaction:(r,a)=>{const e=r.trackStock??!0,t=r.allowNegativeStock??!1,s=r.current_stock??0;return!e&&a.type!=="adjustment"?{valid:!1,reason:"Cannot process stock transactions for non-tracked items"}:a.type==="out"&&s<a.quantity&&!t?{valid:!1,reason:"Insufficient stock for transaction"}:{valid:!0}},needsReorder:r=>{const a=r.trackStock??!0,e=r.current_stock??0,t=r.reorder_level??0;return a?e<=t?{valid:!0,reason:`Stock level (${e}) at or below reorder point (${t})`}:{valid:!1}:{valid:!1,reason:"Item does not track stock"}},getStockStatus:r=>{const a=r.trackStock??!0,e=r.current_stock??0,t=r.reorder_level??0,s=r.maxStockLevel??Number.MAX_SAFE_INTEGER;return a?e===0?"out":e<=t?"low":e>=s?"high":"normal":"normal"},validateStockLevels:r=>{const a=[],e=r.reorder_level??0,t=r.maxStockLevel??Number.MAX_SAFE_INTEGER,s=r.unit_price??0,n=r.cost_price??0;return r.reorder_level!==void 0&&r.maxStockLevel!==void 0&&e>t&&a.push("Minimum stock level cannot exceed maximum stock level"),r.reorder_level!==void 0&&e<0&&a.push("Reorder level must be greater than or equal to zero"),r.unit_price!==void 0&&r.cost_price!==void 0&&s<=n&&n>0&&a.push("Selling price should be greater than cost price"),{valid:a.length===0,errors:a}}};class J{constructor(){F(this,"adapter");this.adapter=new j}async getInventoryItems(a={}){const e={limit:20,offset:0,...a},t=H(Z,e);if(!t.success)return t.error;const{limit:s,offset:n,category:u,status:c,supplier:i,lowStock:o,search:l}=t.data,p={select:`
        *,
        inventory_categories(*),
        inventory_transactions(*)
      `,orderBy:{column:"name",ascending:!0},limit:s,offset:n,filters:{}};u&&(p.filters.category=u),c&&(p.filters.status=c),i&&(p.filters.supplier=i);const C=await this.adapter.executeQuery({tableName:"inventory_items",rateLimitKey:"inventory:read",enableLogging:!0},async()=>{let w=this.adapter.buildQuery("inventory_items",p);return l&&(w=w.or(`name.ilike.%${l}%, sku.ilike.%${l}%, description.ilike.%${l}%`)),o&&(w=w.lt("current_stock","reorder_point")),w},"read");if(C.success){const O=(Array.isArray(C.data)?C.data:[C.data]).map(N=>this.transformInventoryItemFromDb(N));return{...C,data:O}}return C}async getEnhancedInventoryItems(a={}){const e=await this.getInventoryItems(a);if(!e.success)return e;const t=await Promise.all(e.data.map(async s=>{const n=await this.calculateItemMetrics(s.id);return{...s,metrics:n.success?n.data:void 0}}));return{...e,data:t}}async getInventoryItemById(a){const e=I(E,{id:a});if(!e.success)return e.error;const t=await this.adapter.executeQuery({tableName:"inventory_items",rateLimitKey:"inventory:read",enableLogging:!0},async()=>this.adapter.buildQuery("inventory_items",{select:`
            *,
            inventory_categories(*),
            inventory_transactions(*)
          `,filters:{id:a}}),"read");return t.success?{...t,data:this.transformInventoryItemFromDb(t.data)}:t}async createInventoryItem(a){const e=I(z,a);if(!e.success)return e.error;const t=e.data,s=L.validateStockLevels(t);if(!s.valid)return{success:!1,error:{type:"https://docs.trainstation-dashboard.com/errors/business-rule-violation",title:"Business Rule Violation",status:400,detail:s.reason||"Inventory item data violates business rules",instance:"/api/inventory",timestamp:new Date().toISOString()},meta:{requestId:crypto.randomUUID(),source:"validation"}};const n=await this.adapter.executeQuery({tableName:"inventory_items",requiredRole:x.STAFF,rateLimitKey:"inventory:create",enableLogging:!0},async()=>{const u=this.adapter.toSnakeCase({name:t.name,description:t.description,sku:t.sku,category:t.category,currentStock:t.currentStock,minStock:t.minStock,maxStock:t.maxStock,reorderPoint:t.reorderPoint,reorderQuantity:t.reorderQuantity,unitOfMeasurement:t.unitOfMeasurement,costPrice:t.costPrice,sellPrice:t.sellPrice,supplier:t.supplier,supplierSku:t.supplierSku,location:t.location,status:t.status||"active",notes:t.notes,tags:t.tags||[]});return this.adapter.buildQuery("inventory_items").insert([u]).select("*")},"write");if(n.success){const u=Array.isArray(n.data)?n.data:[n.data];return{...n,data:this.transformInventoryItemFromDb(u[0])}}return n}async updateInventoryItem(a,e){const t=I(E,{id:a});if(!t.success)return t.error;const s=I(G.omit({id:!0}),e);if(!s.success)return s.error;const n=await this.getInventoryItemById(a);if(!n.success)return n;const u=n.data,c=L.canEdit(u);if(!c.valid)return{success:!1,error:{type:"https://docs.trainstation-dashboard.com/errors/business-rule-violation",title:"Business Rule Violation",status:400,detail:c.reason||"Cannot edit this inventory item",instance:`/api/inventory/${a}`,timestamp:new Date().toISOString()},meta:{requestId:crypto.randomUUID(),source:"validation"}};const i=await this.adapter.executeQuery({tableName:"inventory_items",requiredRole:x.STAFF,rateLimitKey:"inventory:update",enableLogging:!0},async()=>{const o=this.adapter.toSnakeCase({...s.data,updated_at:new Date().toISOString()});return this.adapter.buildQuery("inventory_items").update(o).eq("id",a).select("*")},"write");if(i.success){const o=Array.isArray(i.data)?i.data:[i.data];return{...i,data:this.transformInventoryItemFromDb(o[0])}}return i}async deleteInventoryItem(a,e=!1){const t=I(E,{id:a});if(!t.success)return t.error;const s=await this.getInventoryItemById(a);if(!s.success)return s;const n=s.data,u=L.canDelete(n);if(!u.valid)return{success:!1,error:{type:"https://docs.trainstation-dashboard.com/errors/business-rule-violation",title:"Cannot Delete Item",status:400,detail:u.reason||"Inventory item cannot be deleted",instance:`/api/inventory/${a}`,timestamp:new Date().toISOString()},meta:{requestId:crypto.randomUUID(),source:"validation"}};if(e){const c=await this.adapter.executeQuery({tableName:"inventory_items",requiredRole:x.ADMIN,rateLimitKey:"inventory:delete",enableLogging:!0},async()=>this.adapter.buildQuery("inventory_items").delete().eq("id",a),"write");return c.success?{...c,data:{deleted:!0}}:c}else{const c=await this.updateInventoryItem(a,{status:"discontinued"});return c.success?{success:!0,data:{deleted:!0},meta:c.meta}:c}}async createTransaction(a){const e=I(W,a);if(!e.success)return e.error;const t=e.data,s=await this.getInventoryItemById(t.itemId);if(!s.success)return s;const n=s.data,u=L.validateTransaction(n,t);if(!u.valid)return{success:!1,error:{type:"https://docs.trainstation-dashboard.com/errors/business-rule-violation",title:"Invalid Transaction",status:400,detail:u.reason||"Transaction violates business rules",instance:"/api/inventory/transactions",timestamp:new Date().toISOString()},meta:{requestId:crypto.randomUUID(),source:"validation"}};const c=await this.adapter.executeQuery({tableName:"inventory_transactions",requiredRole:x.STAFF,rateLimitKey:"inventory:transactions:create",enableLogging:!0},async()=>{const i=this.adapter.toSnakeCase({itemId:t.itemId,type:t.type,quantity:t.quantity,reason:t.reason,reference:t.reference,unitCost:t.unitCost,totalCost:t.totalCost,staffId:t.staffId,notes:t.notes,metadata:t.metadata});let o=n.currentStock;return["in","adjustment_positive"].includes(t.type)?o+=t.quantity:(["out","adjustment_negative","damaged","expired"].includes(t.type)||t.type==="transfer")&&(o-=t.quantity),await this.adapter.buildQuery("inventory_items").update({current_stock:o,updated_at:new Date().toISOString()}).eq("id",t.itemId),this.adapter.buildQuery("inventory_transactions").insert([i]).select("*")},"write");if(c.success){const i=Array.isArray(c.data)?c.data:[c.data];return{...c,data:this.transformTransactionFromDb(i[0])}}return c}async getItemTransactions(a){const e=I(E,{id:a});if(!e.success)return e.error;const t=await this.adapter.executeQuery({tableName:"inventory_transactions",rateLimitKey:"inventory:transactions:read",enableLogging:!0},async()=>this.adapter.buildQuery("inventory_transactions",{select:"*",filters:{item_id:a},orderBy:{column:"created_at",ascending:!1}}),"read");if(t.success){const n=(Array.isArray(t.data)?t.data:[t.data]).map(u=>this.transformTransactionFromDb(u));return{...t,data:n}}return t}async getCategories(){const a=await this.adapter.executeQuery({tableName:"inventory_categories",rateLimitKey:"inventory:categories:read",enableLogging:!0},async()=>this.adapter.buildQuery("inventory_categories",{select:"*",orderBy:{column:"name",ascending:!0}}),"read");if(a.success){const t=(Array.isArray(a.data)?a.data:[a.data]).map(s=>this.transformCategoryFromDb(s));return{...a,data:t}}return a}async createCategory(a){const e=I(V,a);if(!e.success)return e.error;const t=e.data,s=await this.adapter.executeQuery({tableName:"inventory_categories",requiredRole:x.MANAGER,rateLimitKey:"inventory:categories:create",enableLogging:!0},async()=>{const n=this.adapter.toSnakeCase({name:t.name,description:t.description,color:t.color,parentId:t.parentId});return this.adapter.buildQuery("inventory_categories").insert([n]).select("*")},"write");if(s.success){const n=Array.isArray(s.data)?s.data:[s.data];return{...s,data:this.transformCategoryFromDb(n[0])}}return s}async getAlerts(){const a=await this.adapter.executeQuery({tableName:"inventory_items",rateLimitKey:"inventory:alerts:read",enableLogging:!0},async()=>this.adapter.buildQuery("inventory_items",{select:"*",orderBy:{column:"name",ascending:!0}}).or("current_stock.lte.reorder_point,current_stock.eq.0,current_stock.gte.max_stock"),"read");if(a.success){const t=(Array.isArray(a.data)?a.data:[a.data]).map(s=>{const n=this.adapter.toCamelCase(s);let u="low_stock",c="",i="medium";return n.currentStock===0?(u="out_of_stock",c=`${n.name} is out of stock`,i="critical"):n.currentStock<=n.reorderPoint?(u="reorder_point",c=`${n.name} has reached reorder point (${n.currentStock} remaining)`,i="high"):n.currentStock>=n.maxStock&&(u="overstock",c=`${n.name} is overstocked (${n.currentStock}/${n.maxStock})`,i="low"),{id:crypto.randomUUID(),itemId:n.id,type:u,message:c,severity:i,threshold:n.reorderPoint,currentValue:n.currentStock,createdAt:new Date().toISOString()}});return{...a,data:t}}return a}async calculateItemMetrics(a){return{success:!0,data:{turnoverRate:0,averageCost:0,profitMargin:0,daysOfSupply:0,lastRestockDate:null,totalValueOnHand:0},meta:{requestId:crypto.randomUUID(),source:"calculation"}}}transformInventoryItemFromDb(a){const e=this.adapter.toCamelCase(a);return{id:e.id,name:e.name,description:e.description||void 0,sku:e.sku,category:e.category,currentStock:e.currentStock,minStock:e.minStock,maxStock:e.maxStock,reorderPoint:e.reorderPoint,reorderQuantity:e.reorderQuantity,unitOfMeasurement:e.unitOfMeasurement,costPrice:e.costPrice,sellPrice:e.sellPrice||void 0,supplier:e.supplier||void 0,supplierSku:e.supplierSku||void 0,location:e.location||void 0,status:e.status,notes:e.notes||void 0,tags:e.tags||[],createdAt:e.createdAt,updatedAt:e.updatedAt,lastStockUpdate:e.lastStockUpdate||void 0}}transformTransactionFromDb(a){const e=this.adapter.toCamelCase(a);return{id:e.id,itemId:e.itemId,type:e.type,quantity:e.quantity,reason:e.reason||void 0,reference:e.reference||void 0,unitCost:e.unitCost||void 0,totalCost:e.totalCost||void 0,staffId:e.staffId,notes:e.notes||void 0,metadata:e.metadata||void 0,createdAt:e.createdAt}}transformCategoryFromDb(a){const e=this.adapter.toCamelCase(a);return{id:e.id,name:e.name,description:e.description||void 0,color:e.color,parentId:e.parentId||void 0,createdAt:e.createdAt,updatedAt:e.updatedAt}}}const v=new J,f=(r,a="data")=>{var e,t,s,n,u,c,i;if(!r.success)throw{type:((e=r.error)==null?void 0:e.status)===422?"validation":((t=r.error)==null?void 0:t.status)===401?"authentication":((s=r.error)==null?void 0:s.status)===403?"authorization":((n=r.error)==null?void 0:n.status)===404?"not_found":"server",message:((u=r.error)==null?void 0:u.detail)||`Failed to process ${a}`,details:r.error,fieldErrors:(i=(c=r.error)==null?void 0:c.errors)==null?void 0:i.reduce((l,p)=>({...l,[p.field]:p.message}),{})};return r.data},M=r=>r.fieldErrors&&Object.keys(r.fieldErrors).length>0?Object.values(r.fieldErrors).join(", "):r.message,Q=(r,a,e,t)=>{r.setQueryData(a,s=>{if(!s)return t==="add"?[e]:[];switch(t){case"add":return[e,...s];case"update":return s.map(n=>n.id===e.id?e:n);case"remove":return s.filter(n=>n.id!==e.id);default:return s}})},D={SHORT:2*60*1e3,MEDIUM:5*60*1e3},T={SHORT:1*60*1e3,MEDIUM:3*60*1e3};function se(){const r=R(),a=A({queryKey:["inventory_categories"],queryFn:async()=>{const i=await v.getCategories();return f(i,"categories")},staleTime:T.MEDIUM,cacheTime:D.MEDIUM}),e=S({mutationFn:async i=>{const o=await v.createCategory(i);return f(o,"category")},onSuccess:i=>{r.invalidateQueries({queryKey:["inventory_categories"]}),Q(r,["inventory_categories"],i,"add"),y.success("Category added successfully!")},onError:i=>{const o=M(i);y.error(`Error adding category: ${o}`)}}),t=S({mutationFn:async({id:i,updates:o})=>{const l=await v.updateCategory(i,o);return f(l,"category")},onSuccess:i=>{r.invalidateQueries({queryKey:["inventory_categories"]}),Q(r,["inventory_categories"],i,"update"),y.success("Category updated successfully!")},onError:i=>{const o=M(i);y.error(`Error updating category: ${o}`)}}),s=S({mutationFn:async i=>{const o=await v.deleteCategory(i);return f(o,"category deletion")},onSuccess:(i,o)=>{r.invalidateQueries({queryKey:["inventory_categories"]}),r.removeQueries({queryKey:["inventory_categories",o]}),y.success("Category deleted successfully!")},onError:i=>{y.error(`Error deleting category: ${i.message}`)}}),n=b.useCallback(async i=>{try{return{success:!0,data:await e.mutateAsync(i)}}catch(o){return{success:!1,error:o}}},[e]),u=b.useCallback(async(i,o)=>{try{return{success:!0,data:await t.mutateAsync({id:i,updates:o})}}catch(l){return{success:!1,error:l}}},[t]),c=b.useCallback(async i=>{try{return await s.mutateAsync(i),{success:!0}}catch(o){return{success:!1,error:o}}},[s]);return{categories:a.data||[],isLoading:a.isLoading,isError:a.isError,error:a.error,createCategory:n,updateCategory:u,deleteCategory:c,createCategoryMutation:e.mutate,updateCategoryMutation:t.mutate,deleteCategoryMutation:s.mutate,isCreating:e.isPending,isUpdating:t.isPending,isDeleting:s.isPending,refetch:a.refetch}}function ne(r){const a=R(),e=A({queryKey:["inventory_items",r],queryFn:async()=>{const o=await v.getItems(r);return f(o,"inventory items")},staleTime:T.MEDIUM,cacheTime:D.MEDIUM}),t=S({mutationFn:async o=>{const l=await v.createItem(o);return f(l,"inventory item")},onSuccess:o=>{a.invalidateQueries({queryKey:["inventory_items"]}),Q(a,["inventory_items"],o,"add"),y.success("Item added successfully!")},onError:o=>{const l=M(o);y.error(`Error adding item: ${l}`)}}),s=S({mutationFn:async({id:o,updates:l})=>{const p=await v.updateItem(o,l);return f(p,"inventory item")},onSuccess:o=>{a.invalidateQueries({queryKey:["inventory_items"]}),a.setQueryData(["inventory_items",o.id],o),Q(a,["inventory_items"],o,"update"),y.success("Item updated successfully!")},onError:o=>{const l=M(o);y.error(`Error updating item: ${l}`)}}),n=S({mutationFn:async o=>{const l=await v.deleteItem(o);return f(l,"inventory item deletion")},onSuccess:(o,l)=>{a.invalidateQueries({queryKey:["inventory_items"]}),a.removeQueries({queryKey:["inventory_items",l]}),y.success("Item deleted successfully!")},onError:o=>{y.error(`Error deleting item: ${o.message}`)}}),u=b.useCallback(async o=>{try{return{success:!0,data:await t.mutateAsync(o)}}catch(l){return{success:!1,error:l}}},[t]),c=b.useCallback(async(o,l)=>{try{return{success:!0,data:await s.mutateAsync({id:o,updates:l})}}catch(p){return{success:!1,error:p}}},[s]),i=b.useCallback(async o=>{try{return await n.mutateAsync(o),{success:!0}}catch(l){return{success:!1,error:l}}},[n]);return{items:e.data||[],isLoading:e.isLoading,isError:e.isError,error:e.error,createItem:u,updateItem:c,deleteItem:i,createItemMutation:t.mutate,updateItemMutation:s.mutate,deleteItemMutation:n.mutate,isCreating:t.isPending,isUpdating:s.isPending,isDeleting:n.isPending,refetch:e.refetch}}function oe(r){const a=A({queryKey:["inventory_items",r],queryFn:async()=>{if(!r)throw new Error("Item ID is required");const e=await v.getItemById(r);return f(e,"inventory item")},enabled:!!r,staleTime:T.MEDIUM,cacheTime:D.MEDIUM});return{item:a.data,isLoading:a.isLoading,isError:a.isError,error:a.error,refetch:a.refetch}}function ie(r,a){const e=R(),t=A({queryKey:["inventory_transactions",r,a],queryFn:async()=>{const u=await v.getTransactions({...a,itemId:r});return f(u,"inventory transactions")},staleTime:T.SHORT,cacheTime:D.SHORT}),s=S({mutationFn:async u=>{const c=await v.createTransaction(u);return f(c,"inventory transaction")},onSuccess:u=>{e.invalidateQueries({queryKey:["inventory_transactions"]}),e.invalidateQueries({queryKey:["inventory_items"]}),r&&(e.invalidateQueries({queryKey:["inventory_transactions",r]}),e.invalidateQueries({queryKey:["inventory_items",r]})),y.success("Transaction recorded successfully!")},onError:u=>{const c=M(u);y.error(`Error recording transaction: ${c}`)}}),n=b.useCallback(async u=>{try{return{success:!0,data:await s.mutateAsync(u)}}catch(c){return{success:!1,error:c}}},[s]);return{transactions:t.data||[],isLoading:t.isLoading,isError:t.isError,error:t.error,createTransaction:n,createTransactionMutation:s.mutate,isCreating:s.isPending,refetch:t.refetch}}function ce(r){return A({queryKey:["low_stock_items",r],queryFn:async()=>{const a=await v.getLowStockItems(r);return f(a,"low stock items")},staleTime:T.SHORT,cacheTime:D.SHORT})}export{ne as a,se as b,ie as c,oe as d,ce as u};
